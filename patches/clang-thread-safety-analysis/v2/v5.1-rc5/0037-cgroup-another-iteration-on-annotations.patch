From 550ea28ecf2a78ba0069dfbbe19fd5b94a20385a Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Sun, 21 Apr 2019 08:15:32 +0200
Subject: [PATCH 37/75] cgroup: another iteration on annotations

Writing !NULL does not work, so use 1 instead.
!
---
 kernel/cgroup/cgroup-internal.h | 2 +-
 kernel/cgroup/cgroup.c          | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/cgroup/cgroup-internal.h b/kernel/cgroup/cgroup-internal.h
index 30e39f3932ad..faddbe3a45c4 100644
--- a/kernel/cgroup/cgroup-internal.h
+++ b/kernel/cgroup/cgroup-internal.h
@@ -233,7 +233,7 @@ struct task_struct *cgroup_procs_write_start(char *buf, bool threadgroup)
 void cgroup_procs_write_finish(struct task_struct *task)
 	__releases(&cgroup_threadgroup_rwsem);
 
-void cgroup_lock_and_drain_offline(struct cgroup *cgrp);
+void cgroup_lock_and_drain_offline(struct cgroup *cgrp) __attribute__((acquire_capability(cgroup_mutex)));
 
 int cgroup_mkdir(struct kernfs_node *parent_kn, const char *name, umode_t mode);
 int cgroup_rmdir(struct kernfs_node *kn);
diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index b832b3eddffc..78cfae99429f 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -1552,7 +1552,7 @@ void cgroup_kn_unlock(struct kernfs_node *kn) __attribute__((release_capability(
  * locking under kernfs active protection and allows all kernfs operations
  * including self-removal.
  */
-struct cgroup *cgroup_kn_lock_live(struct kernfs_node *kn, bool drain_offline) __attribute__((try_acquire_capability(!NULL, cgroup_mutex)))
+struct cgroup *cgroup_kn_lock_live(struct kernfs_node *kn, bool drain_offline) __attribute__((try_acquire_capability(1, cgroup_mutex)))
 {
 	struct cgroup *cgrp;
 
-- 
2.17.1

