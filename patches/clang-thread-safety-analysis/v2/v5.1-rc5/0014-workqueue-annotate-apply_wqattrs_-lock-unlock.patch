From 7eabab77a02823c004ecff6965baf553b08a6949 Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Fri, 19 Apr 2019 11:41:42 +0200
Subject: [PATCH 14/79] workqueue: annotate apply_wqattrs_{lock,unlock}

Handle this warning:

kernel/workqueue.c:3983:1: warning: mutex 'wq_pool_mutex' is still held at the end of function [-Wthread-safety-analysis]
}
^
kernel/workqueue.c:3982:2: note: mutex acquired here
        mutex_lock(&wq_pool_mutex);
        ^
kernel/workqueue.c:3987:2: warning: releasing mutex 'wq_pool_mutex' that was not held [-Wthread-safety-analysis]
        mutex_unlock(&wq_pool_mutex);
        ^
2 warnings generated.
---
 kernel/workqueue.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index ddee541ea97a..a558886baa9c 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -3975,14 +3975,14 @@ static void apply_wqattrs_commit(struct apply_wqattrs_ctx *ctx)
 	mutex_unlock(&ctx->wq->mutex);
 }
 
-static void apply_wqattrs_lock(void)
+static void apply_wqattrs_lock(void) __attribute__((acquire_capability(wq_pool_mutex)))
 {
 	/* CPUs should stay stable across pwq creations and installations */
 	get_online_cpus();
 	mutex_lock(&wq_pool_mutex);
 }
 
-static void apply_wqattrs_unlock(void)
+static void apply_wqattrs_unlock(void) __attribute__((release_capability(wq_pool_mutex)))
 {
 	mutex_unlock(&wq_pool_mutex);
 	put_online_cpus();
-- 
2.17.1

