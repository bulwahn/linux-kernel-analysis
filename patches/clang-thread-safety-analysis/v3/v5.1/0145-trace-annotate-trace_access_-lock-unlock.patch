From 6a19397aed1bb098296808129bad2de12e8d5855 Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Fri, 16 Aug 2019 14:57:04 +0200
Subject: [PATCH 145/171] trace: annotate trace_access_{lock,unlock}()

SILENCES:

kernel/trace/trace.c:670:3: warning: cannot resolve lock expression [-Wthread-safety-analysis]
                mutex_lock(&per_cpu(cpu_access_lock, cpu));
                ^~~~~~~~~~
kernel/trace/trace.c:679:3: warning: cannot resolve lock expression [-Wthread-safety-analysis]
                mutex_unlock(&per_cpu(cpu_access_lock, cpu));
                ^~~~~~~~~~~~

Link: https://github.com/ClangBuiltLinux/thread-safety-analysis/issues/143
---
 kernel/trace/trace.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index a34ecf38fc89..53fa41bd287b 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -655,7 +655,7 @@ DEFINE_MUTEX(trace_types_lock);
 static DECLARE_RWSEM(all_cpu_access_lock);
 static DEFINE_PER_CPU(struct mutex, cpu_access_lock);
 
-static inline void trace_access_lock(int cpu)
+static inline void trace_access_lock(int cpu) __acquires_mutex(cpu_access_lock) __no_thread_safety_analysis
 {
 	if (cpu == RING_BUFFER_ALL_CPUS) {
 		/* gain it for accessing the whole ring buffer. */
@@ -671,7 +671,7 @@ static inline void trace_access_lock(int cpu)
 	}
 }
 
-static inline void trace_access_unlock(int cpu)
+static inline void trace_access_unlock(int cpu) __releases_mutex(cpu_access_lock) __no_thread_safety_analysis
 {
 	if (cpu == RING_BUFFER_ALL_CPUS) {
 		up_write(&all_cpu_access_lock);
-- 
2.17.1

