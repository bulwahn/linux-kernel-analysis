From 3928ca3b633f2291cb2720784ebd0d619ec136c6 Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Fri, 21 Jun 2019 08:16:14 +0200
Subject: [PATCH 119/171] tty: rewrite code to make clang understand

clang warned:

drivers/tty/tty_buffer.c:62:1: warning: mutex 'buf->lock' is still held at the end of function [-Wthread-safety-analysis]
}
^
drivers/tty/tty_buffer.c:61:2: note: mutex acquired here
        mutex_lock(&buf->lock);
        ^
drivers/tty/tty_buffer.c:73:2: warning: releasing mutex 'buf->lock' that was not held [-Wthread-safety-analysis]
        mutex_unlock(&buf->lock);
        ^

Then, added proper annotation with __acquires_mutex, __releases_mutex,
but clang cannot handle the aliasing.

So it warned more:

drivers/tty/tty_buffer.c:62:1: warning: mutex 'buf->lock' is still held at the end of function [-Wthread-safety-analysis]
}
^
drivers/tty/tty_buffer.c:61:2: note: mutex acquired here
        mutex_lock(&buf->lock);
        ^
drivers/tty/tty_buffer.c:62:1: warning: expecting mutex 'port->buf.lock' to be held at the end of function [-Wthread-safety-analysis]
}
^
drivers/tty/tty_buffer.c:56:6: note: mutex acquired here
void tty_buffer_lock_exclusive(struct tty_port *port) __acquires_mutex(port->buf.lock)
     ^
drivers/tty/tty_buffer.c:73:2: warning: releasing mutex 'buf->lock' that was not held [-Wthread-safety-analysis]
        mutex_unlock(&buf->lock);
        ^
drivers/tty/tty_buffer.c:76:1: warning: mutex 'port->buf.lock' is still held at the end of function [-Wthread-safety-analysis]
}
^
drivers/tty/tty_buffer.c:65:57: note: mutex acquired here
void tty_buffer_unlock_exclusive(struct tty_port *port) __releases_mutex(port->buf.lock)
                                                        ^
./include/linux/compiler_attributes.h:267:56: note: expanded from macro '__releases_mutex'
\# define __releases_mutex(x)            __attribute__((release_capability(x)))
                                                       ^

Rewrite the code to make clang understand.

Link: https://github.com/ClangBuiltLinux/thread-safety-analysis/issues/108
---
 drivers/tty/tty_buffer.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/tty/tty_buffer.c b/drivers/tty/tty_buffer.c
index ec145a59f199..52e30ee38d64 100644
--- a/drivers/tty/tty_buffer.c
+++ b/drivers/tty/tty_buffer.c
@@ -53,16 +53,16 @@
  *	flip buffer
  */
 
-void tty_buffer_lock_exclusive(struct tty_port *port)
+void tty_buffer_lock_exclusive(struct tty_port *port) __acquires_mutex(port->buf.lock)
 {
 	struct tty_bufhead *buf = &port->buf;
 
 	atomic_inc(&buf->priority);
-	mutex_lock(&buf->lock);
+	mutex_lock(&port->buf.lock);
 }
 EXPORT_SYMBOL_GPL(tty_buffer_lock_exclusive);
 
-void tty_buffer_unlock_exclusive(struct tty_port *port)
+void tty_buffer_unlock_exclusive(struct tty_port *port) __releases_mutex(port->buf.lock)
 {
 	struct tty_bufhead *buf = &port->buf;
 	int restart;
@@ -70,7 +70,7 @@ void tty_buffer_unlock_exclusive(struct tty_port *port)
 	restart = buf->head->commit != buf->head->read;
 
 	atomic_dec(&buf->priority);
-	mutex_unlock(&buf->lock);
+	mutex_unlock(&port->buf.lock);
 	if (restart)
 		queue_work(system_unbound_wq, &buf->work);
 }
-- 
2.17.1

