From f278ab184b0c1be5ea0d9b34a7eb55a64e6ae6e6 Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Sat, 20 Apr 2019 03:56:53 +0200
Subject: [PATCH 16/90] cgroup: add some annotations

TODO: squashed some commits here, Need to name all warnings that were
resolved in the end.
---
 kernel/cgroup/cgroup-internal.h | 2 +-
 kernel/cgroup/cgroup.c          | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/kernel/cgroup/cgroup-internal.h b/kernel/cgroup/cgroup-internal.h
index 30e39f3932ad..d3577748aca8 100644
--- a/kernel/cgroup/cgroup-internal.h
+++ b/kernel/cgroup/cgroup-internal.h
@@ -233,7 +233,7 @@ struct task_struct *cgroup_procs_write_start(char *buf, bool threadgroup)
 void cgroup_procs_write_finish(struct task_struct *task)
 	__releases(&cgroup_threadgroup_rwsem);
 
-void cgroup_lock_and_drain_offline(struct cgroup *cgrp);
+void cgroup_lock_and_drain_offline(struct cgroup *cgrp) __acquires_mutex(cgroup_mutex);
 
 int cgroup_mkdir(struct kernfs_node *parent_kn, const char *name, umode_t mode);
 int cgroup_rmdir(struct kernfs_node *kn);
diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index 3f2b4bde0f9c..8463a50d32d3 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -1520,7 +1520,7 @@ static u16 cgroup_calc_subtree_ss_mask(u16 subtree_control, u16 this_ss_mask)
  * inaccessible any time.  If the caller intends to continue to access the
  * cgroup, it should pin it before invoking this function.
  */
-void cgroup_kn_unlock(struct kernfs_node *kn)
+void cgroup_kn_unlock(struct kernfs_node *kn) __releases_mutex(cgroup_mutex)
 {
 	struct cgroup *cgrp;
 
@@ -1552,7 +1552,7 @@ void cgroup_kn_unlock(struct kernfs_node *kn)
  * locking under kernfs active protection and allows all kernfs operations
  * including self-removal.
  */
-struct cgroup *cgroup_kn_lock_live(struct kernfs_node *kn, bool drain_offline)
+struct cgroup *cgroup_kn_lock_live(struct kernfs_node *kn, bool drain_offline) __try_acquires_mutex(1, cgroup_mutex)
 {
 	struct cgroup *cgrp;
 
@@ -2882,7 +2882,7 @@ static int cgroup_update_dfl_csses(struct cgroup *cgrp)
  * cgroup_mutex and drains the previous css instances of @cgrp's subtree.
  */
 void cgroup_lock_and_drain_offline(struct cgroup *cgrp)
-	__acquires(&cgroup_mutex)
+	__acquires(&cgroup_mutex) __acquires_mutex(cgroup_mutex)
 {
 	struct cgroup *dsct;
 	struct cgroup_subsys_state *d_css;
-- 
2.17.1

