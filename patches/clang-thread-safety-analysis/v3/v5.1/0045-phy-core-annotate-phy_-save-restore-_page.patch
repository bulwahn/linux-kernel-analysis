From e9b2432f773c465be4befd5aae4882be7148af2b Mon Sep 17 00:00:00 2001
From: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date: Mon, 22 Apr 2019 18:50:11 +0200
Subject: [PATCH 45/82] phy-core: annotate phy_{save,restore}_page

HANDLES:

drivers/net/phy/phy-core.c:805:1: warning: mutex 'phydev->mdio.bus->mdio_lock' is still held at the end of function [-Wthread-safety-analysis]
}
^
drivers/net/phy/phy-core.c:803:2: note: mutex acquired here
        mutex_lock(&phydev->mdio.bus->mdio_lock);
        ^

drivers/net/phy/phy-core.c:870:2: warning: releasing mutex 'phydev->mdio.bus->mdio_lock' that was not held [-Wthread-safety-analysis]
        mutex_unlock(&phydev->mdio.bus->mdio_lock);
        ^
NEW ONES NEXT:

drivers/net/phy/phy-core.c:834:1: warning: mutex 'phydev->mdio.bus->mdio_lock' is still held at the end of function [-Wthread-safety-analysis]
}
^
drivers/net/phy/phy-core.c:823:18: note: mutex acquired here
        oldpage = ret = phy_save_page(phydev);
                        ^
drivers/net/phy/phy-core.c:892:9: warning: releasing mutex 'phydev->mdio.bus->mdio_lock' that was not held [-Wthread-safety-analysis]
        return phy_restore_page(phydev, oldpage, ret);
               ^
drivers/net/phy/phy-core.c:913:9: warning: releasing mutex 'phydev->mdio.bus->mdio_lock' that was not held [-Wthread-safety-analysis]
        return phy_restore_page(phydev, oldpage, ret);
               ^
drivers/net/phy/phy-core.c:936:9: warning: releasing mutex 'phydev->mdio.bus->mdio_lock' that was not held [-Wthread-safety-analysis]
        return phy_restore_page(phydev, oldpage, ret);
               ^
---
 drivers/net/phy/phy-core.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/phy/phy-core.c b/drivers/net/phy/phy-core.c
index 5016cd5fd7c7..f3e5d4e7e521 100644
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@ -798,7 +798,7 @@ static int __phy_write_page(struct phy_device *phydev, int page)
  * returns a negative errno. phy_restore_page() must always be called
  * after this, irrespective of success or failure of this call.
  */
-int phy_save_page(struct phy_device *phydev)
+int phy_save_page(struct phy_device *phydev) __acquires_mutex(phydev->mdio.bus->mdio_lock)
 {
 	mutex_lock(&phydev->mdio.bus->mdio_lock);
 	return __phy_read_page(phydev);
@@ -850,7 +850,7 @@ EXPORT_SYMBOL_GPL(phy_select_page);
  *   phy_write_page()'s negative value if it were in error, otherwise
  *   @ret.
  */
-int phy_restore_page(struct phy_device *phydev, int oldpage, int ret)
+int phy_restore_page(struct phy_device *phydev, int oldpage, int ret) __releases_mutex(phydev->mdio.bus->mdio_lock)
 {
 	int r;
 
-- 
2.17.1

